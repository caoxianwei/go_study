上节课回顾：
OOP：面向对象
一：面向对象
	核心：对象

	封装性，继承性，多态性


二：类，对象
	类：同一类事物的抽象描述：
		静态属性：字段--->变量
		动态行为：行为功能--->方法

	对象：类中的一个具体的实例


	人类：张三，李四，王五。。。


	根据类--->对象，对象的实例化过程



三：Go--->面向对象
1.定义类
struct：结构体------>Go中一种数据类型
	理解为面向对象中的类

	type 类名 struct{
		//字段的定义
		name string
		age int
	}

2.创建对象
	var o1 Person
	o1 = Person{}
	o1.name = ""
	fmt.Println(o1.name)

	o2 := Person{字段名=数值，字段名=数值}
	o3 := Person{数值，数值。。。}

	o4 := new(Person) //new()，内置函数的作用：专门用于创建指针类型的变量：


创建：
make()--->创建引用类型的变量：存储的是数据的地址
	slice，map，chan
new()--->创建指针类型的变量：存储的是变量的地址
	pointer：struct，array，int。。。。

3.对象可以访问该类中的属性和方法：.
	属性：
		赋值：对象.属性 = 数值
		取值：对象.属性

	方法：
		调用：对象.方法()


4.结构体的类型：
	%T-->包名.结构体名
	值类型---->结合指针使用

5.匿名结构体和匿名字段
	类比于匿名函数，匿名对象
	对象 := 匿名结构体{}{}
	匿名函数{}()

	没有名字的字段：字段名和字段的类型一致。

6.结构体的嵌套：
	匿名：模拟继承关系，一个类作为另一个类的子类
		type A struct{}
		type B struct{
			A //匿名字段
		}
		子类可以直接访问父类的属性和方法
		子类也可新增自己的属性和方法
		子类也可以重写父类已有的方法

		b := B{}
		b.A的字段//b.A.A的字段，叫提升字段

	非匿名：模拟聚合关系，一个类作为另一个类的属性
		type C struct{}
		type D struct{
			c C//非匿名字段的字段
		}
		d := D{}
		d.c.C的属性



本堂课内容：
s1 := []int{1,2,3,4}
s2 :=[] string{}
s3 := make([] int,0,10)

排序：
	冒泡排序：
		arr :=[10]int{1,3,3,4,5,5,,6,8}
		if arr[j] > arr[j+1]{
			交换
		}

		s1 := []Student{s1,s2,s3,s4}
		if s1[j].count > s1[j+1].count{
			交换
		}
	sort包：


一：方法method
	函数：function，一段具有独立功能的代码，可以被反复多次调用
	方法：method，一个类的行为功能，只有该类的对象才能有调用



函数式编程+OOP-->语言
	function，method分开

	go，python，js


定义类：
	字段：field
		变量
		静态属性
	方法：method
		函数
		动态行为


人类：
	eat(),work()

	张三.eat(),张三.work()

猫类：
	eat(),爬树()
	啸天.eat()

函数：
	是否是闰年()


二：结构interface
	类：
		属性-->变量
		行为-->方法
			某个类中的行为功能：
				方法的定义：功能的描述
				方法的代码：功能的实现

	接口：功能的描述的集合
		定义具有哪些功能


		面向接口编程--->面向实现类编程


	接口的意义：
		解耦合：程序和程序之间的关联程度，降低耦合性


		继承关系：增耦合


	设计程序：
		求加减乘除运算：


		设计程序：使用数据库
			数据库：专门用于存储数据


			接口：定义功能
				insert()
				delete()
				update()
				select()


			有钱：oracle
				增加，删除，查找，修改。。。。
			没钱：mysql
				增加，删除，查找，修改。。。。


			db对象：链接数据库的对象

			没钱：实现类mysql
				db.insert()
				db.select()

			有钱：实现类改为oralce

			注册：
			登录：

		SQLServer，
		mysql，
		oracle，
		db2
		sqlite：
		access


		增删改查





三：error的处理
	函数时候：
四：异常：panic恐慌，recover恢复



math包：数学内容
	pow(a,b)
	pow10(n)
	sqrt()
	ceil()
	floor()
	abs()
	mod()
	max()
	min()

strconvs包：字符串和基本类型之间的转换：int，float，bool
	字符串-->基本数据类型
		parseXXX(字符串)-->基本数据类型，error

	基本数据类型-->字符串
		format(基本数类型)-->string

	额外的函数：
		Itoa(),int-->string
		Atoi(),string-->int


fmt包：
	Println()
	Print()
	Printf()
	Scanln()
	Scanf()

	Sprintln()-->string
	Sprint()-->string
	Sprintf()-->string

	Errorf()-->error



type A interface{
	test()
}

type B interface{
	test()
}

type C struct{
	
}

func (c C) test(){
	
}

func fun(a A){//c
	
}
func fun2 (b B){//c
	
}

var arr :=[] A{}









总结和作业：
1.方法
method：类似于函数function，
	函数：一段独立功能的代码
	方法：需要有接受者，调用方法的对象

	不同：
		A：意义：
			方法：一个类别的行为功能。
			函数：就是一段独立的代码。

		B：语法：
			方法：方法名可以一致，接受者不同
			函数：函数名不能冲突

		C：定义语法
			方法：func (接受者)方法名(参数列表)(返回值列表){}
			函数：func 函数名(参数列表)(返回值列表){}


		结构体的对象调用方法/指针调用方法

	继承中的方法：
		子类可以直接访问父类的属性和方法
		子类可以新增自己的属性和方法
		子类可以重写(override)父类的方法
2.接口
	interface
	A：概念
		定义方法的描述的集合。只有方法的定义，但是没有方法的实现。实现了解耦合
	B：语法
	type 接口名 interface{
		//方法的定义
		方法名(参数列表)(返回值类型)
	}
	C：实现类
		如果一个类别实现某个接口中的所有方法，那么该类别就叫做该接口的实现类。无需特殊声明

	D：实现面向对象的第三个特征：多态性
		接口的用法：
		创建一个接口类型的对象，其实就是创建任意实现类的对象。
			a)比如一个函数以接口类型作为参数，传入该接口的任意实现类对象
			b)比如创建一个接口类型的容器，存储该接口的任意实现类对象
			c)比如一个函数返回某个接口类型作为返回值，实际上返回该接口的任意实现类对象。

		多态性：
		一个实现类的对象，可以看做接口类型的对象，不能访问实现类的属性
		一个实现类对象，也可以看做是实现类本身的对象，那么可以访问类的属性

	E：空接口
		一个接口中没有任何方法。表示为任意的类型

	F：转型
		方法一：ins，ok:=接口对象.(实际类型)
			ok为true，ins就是转型后的实际类型的对象，可以直接访问类中的属性
			ok为false，类型不对应
		方法二：接口对象.(type),结合switch语句
			switch ins := 接口对象.(type){
			case 实际类型1：
				。。。
			case 实际类型2：
				。。。
			}

3.error
	1.用于表示一种错误类型的对象，go语言内置的接口类型：

	2.type error interface{
		Error() string
	}

	3.函数的返回值：错误

	4.go定义好的：errorString
		errors.New(string)-->*errorString
		fmt.Errorf(string)-->*errorString

	5.自定义错误：自定义struct实现error接口










