上节课回顾：
函数的高级部分：
	1.函数的类型
		func (参数类型，参数类型。。)(返回值类型，返回值类型。。)
		函数的定义格式：
		%T

	2.函数的本质：作为一种特殊数据类型的变量
		作为一种复合的数据类型，
		var a func(...)
		a = fun1//指针类型的变量
		a()

	3.匿名函数
		没有名字的函数，往往定义在另一个函数内部，并且直接进行调用。
		func (形参)（返回值）{

		}（实参）

	4.函数作为参数：回调函数callback
		一个函数(回调函数)作为另一个函数(高阶函数)的参数

	5.函数作为的返回值：闭包结构
		外层函数：
			局部变量：
		内层函数：外层函数的返回值
			访问了外层函数的局部变量，该局部变量并不会随着外层函数的结束而销毁。和内层函数统一称为闭包结构。closure。

	6.defer函数
		延迟执行，




指针：pointer
	1.概念：一种数据类型，一种变量，存储另一个变量的内存地址。
		&：变量，取地址负
		*：指针，取数值
		指针的类型，指针中存储的数据的类型，指针的值，指针的地址
	2.类型
		*Type：Type类型的数据的地址-->
		**Type：指针的指针

	3.指针作为函数的参数
		func fun1(arr [4]int){}//值传递
		func fun2(arr *[4]int){}//引用传递
	4.数组指针，指针数组
		数组指针：数组的指针
			*[size]type
		指针数组：存储了指针的数组
			[size]*type

	5.函数指针，指针函数
		函数指针：函数默认就是指针类型的变量
		指针函数：一个函数，返回值是一个指针。
		func fun1() [size]type{}
		func fun2() *[size]type{}
	6.结构体指针


本堂课内容：
面向对象的程序设计（Object Oriented Programming）

一、面向对象的编程思想
	面向对象：关注的是对象
		1.面向对象的思维方式
			A：问题域中所涉及的对象有哪些
			B：何为这些对象
				就是涉及类的过程：
					a)该类的静态属性：字段也叫属性
						数据：变量
					b)该类的动态属性：行为也叫方法
						动作：方法(函数)
			C：对象和对象之间的关系
				其实就是类和类的关系
				关联关系，聚合关系，继承关系，实现关系。。。。

		面向对象并不是一门语言，而是一种编程的思想。
			Java，python

	面向过程：关注的是过程
		流程图：
			step1：xxx
			step2：xxx
			step3：xxx
			实现了最终效果


		万年历：
			step1：求给定的年份是否是闰年
			step2：求每个月的天数
			step3：求当前日期的上一个月底距离指定1900年的总天数
			step4：求空格量，求当月的天数
			step5：最终打印日历

		函数的封装和调用



	我想去新疆
		面向过程：
			step1：买车或者买火车票
			step2：加油，
			step3：开车，哒哒哒。。。
			step4：到达新疆

		面向对象：
			我--->人
				name，age，sex
				study(),work(),eat(),sleep()...
			新疆--->城市
				城市名称，城市地点
			小黄车--->自行车
				颜色，车轮，锁
				go()

			我

二、两大核心概念：类，对象
	类：类别，同一类事物的抽象描述
		人类，
		猫类
		车类
		房子类
		水杯
		计算机
		。。。

	对象：也叫实例，instance。是类中的一个具体存在的实例
		张三，李四，王二狗，rose。。。。
		啸天，二黄，大黑。。。


	你养的猫：毛毛
	你奶奶家的猫：花花
	隔壁老王的猫：啸天
	。。。

		共同特性：
			属性：
				name，sex，age，color。。。。
			行为：
				eat(),sleep(),爬树(),抓老鼠()....

			--->类的描述


	将对象的共同特征，进行抽取---->类的描述
	将类进行实例化，---->对象


构建类：
	类的定义：
		字段属性：name，age，sex
		行为方法：eat(),sleep(),work()....

会将类进行实例化，得到对象
	var p1 Person
	p1.name,p1.age,p1.sex
	p1.eat(),p1.sleep()

	var p2 Person
	p2.name,p2.age,p2.sex
	p2.eat(),p2.sleep()....




三、面向对象的三大特征：封装，继承，多态

四、go语言的"面向对象"
	类class：--->struct

数据类型：
	基本类型：int，float，bool，string
	复合类型：array，slice，map，function，pointer，struct

	值类型：int，float，bool，string，array，struct
	引用类型：slice，map，function，pointer


五、结构体的语法
	1.struct的语法
	2.数据类型
	3.结构体和结构体指针作为参数和返回值
	4.type
	5.匿名结构体和匿名字段

	
六、结构体的嵌套
	模拟面向对象：聚合关系
		一个类作为另一个类的属性

	模拟面向对象：继承关系
		一个类作为另一个类的子类：子类，父类


继承：作为面向对象的第二个特征：用于描述两个类的关系。
	一个类(子类，派生类，subClass)继承另一个类(父类，超类，基类，superClass)

	子类可以直接访问父类已有的属性和方法
	子类也可以新增自己的属性和方法
	子类也可以重写父类已有的方法


七、方法

八、接口






总结和作业：
一：面向对象
	是一种编程思想。
	结合面向过程：核心：过程
	    面向过程：核心：对象

	A：问题域中涉及到了那些对象
	B：构建类：属性，也叫字段(变量)，行为，也叫方法(函数)
	C：类和类之间的关系

	三大特征：封装性，继承性，多态性

二：类和对象
	面向对象的两大核心概念：
	类：同一类事物的抽象描述
	对象：类别中一个具体的实例

	人：类
	张三：对象

	类和对象的关系？
		将对象的共同特征抽取描述，就是构建类
		将一个类进行实例化，就是创建对象。


三：语法：struct
type Person struct{
	//属性，也叫字段：field
	name string
	age int
}

var p1 Person
p1.name
p1.age


p2 := Person{name:xxx,age:xxx}
p3 := Person{xxx,xxx}


new(Type)-->*Type
p4 := new(type) //指针
p4.name//(*p4).name

四：结构体的类型：结构体和指针
	值类型：深拷贝
	*struct

	p1 := Person{}
	p2 := &p1
	p3 := new(Person)


五：匿名结构体和匿名字段
	没有没有的结构体
	p4 := struct{
	//field
	}{
		//属性赋值
	}

	func (){

	}()

	type xxx struct{
		string
		int
	}
	//匿名字段，将字段的类型作为字段的名字，类型不能冲突

六：结构体的嵌套：
	一个结构体中嵌套另一个结构体
	匿名嵌套：模拟继承
		两个类的关系
			子类可以直接使用父类的属性和方法。
			子类可以新增自己的属性和方法。
			子类可以重写父类已有的方法。

	type A struct{

	}
	type B struct{
		A //is - a
	}
	b 的对象可以直接访问A的属性--->提升字段
	非匿名嵌套：模拟聚合
	type A struct{

		}
		type B struct{
			a A //has a
		}

		b := B{}
		b.a = A{}
		b.a.属性



下周：
方法，接口
错误：error，panic，recover。。。
time，io,bufio...
并发：高并发
	进程：process
	线程：thread
	协程：coroutine

		--->goroutine,协程

	通道：channel
	同步：waitgroup
	上锁：。。。



引用类型存储地址
s1 := []int{1,2,3,4}
fmt.Println(s1) // [1,2,3,4]
fmt.Printf("%p",s1)












